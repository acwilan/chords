---
import App from '../../../layouts/App.astro';
import { getCollection } from 'astro:content';
import { getLocaleFromUrl, createT, type Locale } from '../../../utils/i18n';
import { pdfPath } from '../../../utils/pdfPath';
import { buildSeo, songJsonLd } from '../../../utils/seo';
import { buildSongUrls, slugify } from '../../../utils/urls';

export async function getStaticPaths() {
  const songs = await getCollection('songs');
  const slugs = Array.from(
    new Set(songs.map((s) => s.data.slug || slugify(s.data.title)))
  );
  return slugs.map((slug) => ({ params: { slug } }));
}

const base = import.meta.env.BASE_URL.endsWith('/')
  ? import.meta.env.BASE_URL
  : `${import.meta.env.BASE_URL}/`;
const locale = getLocaleFromUrl(Astro.url.pathname, base);
const t = createT(locale);
const slug = Astro.params.slug;
const songs = await getCollection('songs');
const getSlug = (s: any) => s.data.slug || slugify(s.data.title);
const entries = songs.filter((s) => getSlug(s) === slug);
if (entries.length === 0) {
  throw new Error(`Song not found: ${slug}`);
}
const song = entries.find((e) => e.data.lang === locale) || entries[0];
const otherLocale: Locale = locale === 'en' ? 'es' : 'en';
const otherEntry = entries.find((e) => e.data.lang === otherLocale);
const otherLink = otherEntry
  ? `${base}${otherLocale === 'en' ? 'en/' : ''}songs/${slug}/`
  : undefined;
const otherLangName = otherLocale === 'en' ? 'English' : 'EspaÃ±ol';
const { Content } = await song.render();
const rawPdf = song.data.pdf && pdfPath(song.data.pdf);
const pdf =
  rawPdf && (rawPdf.startsWith('http') ? rawPdf : `${base}${rawPdf.replace(/^\//, '')}`);
const site = Astro.site ? Astro.site.toString().replace(/\/$/, '') : '';
const urls = buildSongUrls({ site, base, locale, slug });
const availableLocales = entries.map((e) => e.data.lang as Locale);
const alternate: Record<string, string> = {};
for (const loc of availableLocales) {
  alternate[loc] = buildSongUrls({ site, base, locale: loc, slug }).canonical;
}
const seo = buildSeo({
  title: song.data.title,
  artist: song.data.artist,
  key: song.data.key,
  seoKeywords: song.data.seoKeywords,
  url: urls.canonical,
  locale,
  type: 'article',
  alternate,
});
const jsonLd = songJsonLd({
  title: song.data.title,
  artist: song.data.artist,
  author: song.data.author,
  locale,
  keywords: seo.keywords,
  url: urls.canonical,
  pdf,
  site,
  base,
  slug,
});
---
<App>
  <Fragment slot="head">
    <title>{seo.title}</title>
    <meta name="description" content={seo.description} />
    <meta name="keywords" content={seo.keywords.join(', ')} />
    <meta property="og:title" content={seo.title} />
    <meta property="og:description" content={seo.description} />
    <meta property="og:type" content={seo.type} />
    <meta property="og:url" content={seo.url} />
    <meta property="og:site_name" content="ChordBook" />
    <meta property="og:locale" content={seo.locale} />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content={seo.title} />
    <meta name="twitter:description" content={seo.description} />
    <link rel="canonical" href={seo.url} />
    {Object.entries(seo.alternate).map(([lang, href]) => (
      <link rel="alternate" hreflang={lang} href={href} />
    ))}
    <script type="application/ld+json">{JSON.stringify(jsonLd)}</script>
  </Fragment>
  <header class="mb-8 border-b pb-4">
    <h1 class="mb-2 text-3xl font-bold">{song.data.title}</h1>
    <div class="flex flex-wrap gap-x-4 gap-y-1 text-sm text-gray-600 dark:text-gray-300">
      {song.data.key && (
        <span><strong>{t('songs.key')}:</strong> {song.data.key}</span>
      )}
      {song.data.bpm && (
        <span><strong>{t('songs.bpm')}:</strong> {song.data.bpm}</span>
      )}
      {song.data.artist && (
        <span><strong>{t('songs.artist')}:</strong> {song.data.artist}</span>
      )}
      {song.data.author && (
        <span><strong>{t('songs.author')}:</strong> {song.data.author}</span>
      )}
    </div>
    {song.data.tags && (
      <div class="mt-2 flex flex-wrap gap-2">
        {song.data.tags.map((tag) => (
          <span class="pill bg-gray-200 px-2 py-0.5 text-xs text-gray-700 dark:bg-gray-700 dark:text-gray-200">{tag}</span>
        ))}
      </div>
    )}
    {otherLink && (
      <p class="mt-2 text-sm">
        <a href={otherLink} class="underline">
      {t('songs.linkOtherLang', { lang: otherLangName })}
        </a>
      </p>
    )}
  </header>
  <Content />
  {pdf && (
    <div class="not-prose mt-8 flex gap-4">
      <a href={pdf} download class="btn-primary">{t('songs.downloadPdf')}</a>
      <a href={pdf} target="_blank" class="btn-secondary">{t('songs.openPdf')}</a>
    </div>
  )}
  <p class="mt-8"><a href={`${base}${locale === 'en' ? 'en/' : ''}songs/`}>{t('songs.goBack')}</a></p>
</App>

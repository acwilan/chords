---
import App from '../../layouts/App.astro';
import { getCollection } from 'astro:content';
import { getLocaleFromUrl, createT } from '../../utils/i18n';
import artistFilterScript from '../../scripts/artistFilter.js?url';

const base = import.meta.env.BASE_URL.endsWith('/')
  ? import.meta.env.BASE_URL
  : `${import.meta.env.BASE_URL}/`;
const locale = getLocaleFromUrl(Astro.url.pathname, base);
const t = createT(locale);
const all = await getCollection('songs');
const map = new Map();
for (const entry of all) {
  const baseSlug = entry.id.replace(/(\.(en|es))?\.md$/, '');
  const lang = entry.data.lang;
  const group = map.get(baseSlug) || {};
  group[lang] = entry;
  map.set(baseSlug, group);
}
const songs = Array.from(map.entries()).map(([slug, langs]) => {
  const entry = langs[locale] || langs.es || langs.en;
  const linkLocale = langs[locale] ? locale : langs.es ? 'es' : 'en';
  return { slug, entry, linkLocale };
});
songs.sort((a, b) => a.entry.data.title.localeCompare(b.entry.data.title));
const tagCounts = new Map<string, number>();
for (const song of songs) {
  for (const tag of song.entry.data.tags ?? []) {
    tagCounts.set(tag, (tagCounts.get(tag) ?? 0) + 1);
  }
}
const tags = Array.from(tagCounts.entries()).sort(([a], [b]) =>
  a.localeCompare(b)
);
const artistCounts = new Map<string, number>();
for (const song of songs) {
  const name = song.entry.data.artist || 'Unknown';
  artistCounts.set(name, (artistCounts.get(name) ?? 0) + 1);
}
const artists = Array.from(artistCounts.entries()).sort(([a], [b]) =>
  a.localeCompare(b)
);
const initialArtist = Astro.url.searchParams.get('artist');
const initialTag = Astro.url.searchParams.get('tag')?.toLowerCase();
const initialCount = songs.filter((song) => {
  const artist = song.entry.data.artist || 'Unknown';
  const songTags = (song.entry.data.tags ?? []).map((t) => t.toLowerCase());
  const matchesArtist = !initialArtist || artist === initialArtist;
  const matchesTag = !initialTag || songTags.includes(initialTag);
  return matchesArtist && matchesTag;
}).length;
const description = t('songs.description');
const url = `${base}${locale === 'en' ? 'en/' : ''}songs/`;
---
<App>
  <Fragment slot="head">
    <title>{t('songs.title')}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={t('songs.title')} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
  </Fragment>
  <h1>{t('songs.title')}</h1>
  <div class="md:flex md:gap-4">
    <aside
      id="artist-sidebar"
      class="fixed inset-y-0 left-0 z-50 w-64 -translate-x-full transform bg-white p-4 transition-transform dark:bg-gray-800 md:static md:mb-4 md:block md:w-48 md:translate-x-0 md:bg-transparent md:p-0 md:shrink-0"
      aria-hidden="true"
    >
      <div class="mb-2 flex items-center justify-between">
        <h2 class="text-sm font-semibold">{t('songs.artists')}</h2>
        <button
          id="artist-clear"
          type="button"
          class="text-xs text-gray-600 hover:underline dark:text-gray-400"
        >
          {t('songs.clear')}
        </button>
      </div>
      <nav aria-label="Artist filters">
        <ul id="artist-filters" class="space-y-2 pl-0">
          <li class="list-none">
            <button
              type="button"
              data-artist=""
              aria-pressed={initialArtist ? 'false' : 'true'}
              class="flex w-full items-center justify-between rounded-full px-3 py-1 text-sm"
            >
              <span>{t('songs.all')}</span>
              <span class="text-xs text-gray-600 dark:text-gray-400">{songs.length}</span>
            </button>
          </li>
          {artists.map(([name, count]) => (
            <li class="list-none">
              <button
                type="button"
                data-artist={name}
                aria-pressed={initialArtist === name ? 'true' : 'false'}
                class="flex w-full items-center justify-between rounded-full px-3 py-1 text-sm"
              >
                <span>{name}</span>
                <span class="text-xs text-gray-600 dark:text-gray-400">{count}</span>
              </button>
            </li>
          ))}
        </ul>
      </nav>
    </aside>
    <div id="artist-overlay" class="fixed inset-0 z-40 bg-black/50 hidden md:hidden"></div>
    <div class="flex-1">
      <div class="mb-2 flex gap-2">
        <label for="song-search" class="sr-only">{t('songs.searchPlaceholder')}</label>
        <input
          id="song-search"
          type="text"
          placeholder={t('songs.searchPlaceholder')}
          class="input w-full"
        />
        <button
          id="artist-sidebar-toggle"
          class="btn-secondary px-3 py-2 text-sm md:hidden"
          aria-controls="artist-sidebar"
          aria-expanded="false"
          type="button"
        >
          {t('songs.filters')}
        </button>
      </div>
      <p class="mb-4 text-xs text-gray-600 dark:text-gray-400">
        {t('songs.searchTip')}
      </p>
      {tags.length > 0 && (
        <div
          id="tag-filters"
          class="mb-4 flex flex-wrap gap-2"
          aria-label={t('songs.tagFilterLabel')}
        >
          {tags.map(([tag, count]) => (
            <button
              type="button"
              data-tag={tag.toLowerCase()}
              aria-pressed={initialTag === tag.toLowerCase() ? 'true' : 'false'}
              class="tag-pill flex items-center gap-1 px-3 py-1 text-sm"
            >
              <span>{tag}</span>
              <span class="text-xs text-gray-600 dark:text-gray-400">({count})</span>
            </button>
          ))}
        </div>
      )}
      <div id="active-artist" class="mb-4" data-label={t('songs.artist')}></div>
      <p
        id="song-count"
        class="mb-4"
        aria-live="polite"
        data-count-template={t('songs.count', { count: '{count}' })}
      >
        {t('songs.count', { count: initialCount })}
      </p>
      <ul
        id="song-list"
        class="grid list-none gap-4 p-0 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3"
      >
        {songs.map((song) => {
          const artist = song.entry.data.artist || 'Unknown';
          const hidden =
            (initialArtist && artist !== initialArtist) ||
            (initialTag &&
              !(song.entry.data.tags ?? [])
                .map((t) => t.toLowerCase())
                .includes(initialTag))
              ? true
              : false;
          return (
            <li
              class="list-none"
              data-title={song.entry.data.title.toLowerCase()}
              data-tags={(song.entry.data.tags ?? [])
                .map((t) => t.toLowerCase())
                .join(' ')}
              data-artist={artist}
              hidden={hidden}
            >
              <a
                href={`${base}${song.linkLocale === 'en' ? 'en/' : ''}songs/${song.slug}/`}
                class="card block"
              >
                <h2 class="text-lg font-semibold">{song.entry.data.title}</h2>
                {song.entry.data.artist && (
                  <p class="text-sm text-gray-600 dark:text-gray-400">{song.entry.data.artist}</p>
                )}
                {song.entry.data.key && (
                  <p class="text-sm text-gray-600 dark:text-gray-400">
                    {t('songs.key')}: {song.entry.data.key}
                  </p>
                )}
                {song.entry.data.tags && (
                  <ul class="mt-2 flex flex-wrap gap-1 list-none p-0">
                    {song.entry.data.tags.map((tag) => (
                      <li class="tag-pill">{tag}</li>
                    ))}
                  </ul>
                )}
              </a>
            </li>
          );
        })}
      </ul>
      <div id="empty-state" class="mt-8 text-center" hidden>
        <div class="mb-4 text-4xl" aria-hidden="true">ðŸŽµ</div>
        <p class="mb-4">{t('songs.noMatches')}</p>
        <button
          id="clear-filters"
          type="button"
          class="text-sm text-blue-600 hover:underline"
        >
          {t('songs.clearFilters')}
        </button>
      </div>
      <p class="mt-8"><a href={base}>{t('songs.goBack')}</a></p>
    </div>
  </div>
  <script id="artist-data" type="application/json">
    {JSON.stringify(artists)}
  </script>
  <script is:inline type="module">
    import Fuse from 'https://cdn.jsdelivr.net/npm/fuse.js@6.6.2/dist/fuse.esm.js';

    const songItems = document.querySelectorAll('#song-list > li');
    const searchInput = document.getElementById('song-search');
    const tagButtons = document.querySelectorAll('#tag-filters button');
    const TAG_STORAGE_KEY = 'tagFilter';
    const countEl = document.getElementById('song-count');
    const countTemplate = countEl?.dataset.countTemplate || '{count}';
    const emptyState = document.getElementById('empty-state');
    const clearFiltersBtn = document.getElementById('clear-filters');

    const songs = Array.from(songItems).map((element) => ({
      element,
      title: element.dataset.title || '',
      artist: element.dataset.artist || 'Unknown',
      tags: element.dataset.tags ? element.dataset.tags.split(' ') : [],
    }));

    const fuse = new Fuse(songs, {
      keys: ['title', 'artist', 'tags'],
      threshold: 0.3,
      ignoreLocation: true,
    });

    function updateCount() {
      const visible = songs.filter((s) => !s.element.hidden).length;
      countEl.textContent = countTemplate.replace('{count}', visible);
      if (emptyState) {
        emptyState.hidden = visible !== 0;
      }
    }

    function applyFilters() {
      const query = searchInput.value.trim();
      const results = query ? fuse.search(query).map((r) => r.item) : songs;
      const resultSet = new Set(results);
      const activeArtist = window.activeArtist;
      const activeTag = window.activeTag;

      songs.forEach((song) => {
        const matchesSearch = resultSet.has(song);
        const matchesTag = !activeTag || song.tags.includes(activeTag);
        const matchesArtist = !activeArtist || song.artist === activeArtist;
        song.element.hidden = !(matchesSearch && matchesTag && matchesArtist);
      });
      updateCount();
    }

    window.applySongFilters = applyFilters;

    let debounce;
    searchInput.addEventListener('input', () => {
      clearTimeout(debounce);
      debounce = setTimeout(applyFilters, 200);
    });

    function updateTagURL(tag) {
      const url = new URL(window.location.href);
      if (tag) {
        url.searchParams.set('tag', tag);
      } else {
        url.searchParams.delete('tag');
      }
      history.replaceState({}, '', url.toString());
    }

    function activateTag(tag) {
      window.activeTag = tag;
      tagButtons.forEach((btn) => {
        const isActive = btn.dataset.tag === tag;
        btn.setAttribute('aria-pressed', String(isActive));
        btn.classList.toggle('bg-primary', isActive);
        btn.classList.toggle('text-white', isActive);
      });
      if (tag) {
        localStorage.setItem(TAG_STORAGE_KEY, tag);
      } else {
        localStorage.removeItem(TAG_STORAGE_KEY);
      }
      updateTagURL(tag);
      applyFilters();
    }

    tagButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        const tag = btn.dataset.tag || '';
        activateTag(window.activeTag === tag ? '' : tag);
      });
    });

    clearFiltersBtn?.addEventListener('click', () => {
      searchInput.value = '';
      document.getElementById('artist-clear')?.click();
      activateTag('');
    });

    let selectedTag = new URLSearchParams(window.location.search).get('tag');
    if (selectedTag) {
      localStorage.setItem(TAG_STORAGE_KEY, selectedTag);
    } else {
      const storedTag = localStorage.getItem(TAG_STORAGE_KEY);
      if (storedTag) {
        selectedTag = storedTag;
      }
    }
    activateTag(selectedTag || '');

    window.addEventListener('keydown', (e) => {
      if (e.key === '/' && !e.ctrlKey && !e.metaKey && !e.altKey) {
        if (
          e.target instanceof HTMLInputElement ||
          e.target instanceof HTMLTextAreaElement ||
          e.target instanceof HTMLSelectElement
        ) {
          return;
        }
        e.preventDefault();
        searchInput.focus();
      } else if (e.key === 'Escape') {
        e.preventDefault();
        if (searchInput.value) {
          searchInput.value = '';
          applyFilters();
        } else {
          document.getElementById('artist-clear')?.click();
          activateTag('');
        }
      }
    });
  </script>
  <script type="module" src={artistFilterScript}></script>
</App>

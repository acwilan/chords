---
import App from '../../layouts/App.astro';
import { getCollection } from 'astro:content';

const songs = await getCollection('songs');
songs.sort((a, b) => a.data.title.localeCompare(b.data.title));
const tags = Array.from(
  new Set(songs.flatMap((song) => song.data.tags ?? []))
).sort();
const base = import.meta.env.BASE_URL.endsWith('/')
  ? import.meta.env.BASE_URL
  : `${import.meta.env.BASE_URL}/`;
const description = 'Browse and search chord charts for worship songs';
const url = `${base}songs/`;
---

<App>
  <Fragment slot="head">
    <title>Songs</title>
    <meta name="description" content={description} />
    <meta property="og:title" content="Songs" />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
  </Fragment>
  <h1>Songs</h1>
  <label for="song-search" class="sr-only">Search songs</label>
  <input
    id="song-search"
    type="text"
    placeholder="Search songs"
    class="input mb-4 w-full"
  />
  {tags.length > 0 && (
    <div
      id="tag-filters"
      class="mb-4 flex flex-wrap gap-2"
      aria-label="Filter by tag"
    >
      {tags.map((tag) => (
        <button
          type="button"
          data-tag={tag.toLowerCase()}
          aria-pressed="false"
          class="tag-pill px-3 py-1 text-sm"
        >
          {tag}
        </button>
      ))}
    </div>
  )}
  <ul
    id="song-list"
    class="grid list-none gap-4 p-0 sm:grid-cols-2 lg:grid-cols-3"
  >
    {songs.map((song) => (
      <li
        class="list-none"
        data-title={song.data.title.toLowerCase()}
        data-tags={(song.data.tags ?? [])
          .map((t) => t.toLowerCase())
          .join(' ')}
      >
        <a
          href={`${base}songs/${song.slug}/`}
          class="card block"
        >
          <h2 class="text-lg font-semibold">{song.data.title}</h2>
          {song.data.key && (
            <p class="text-sm text-gray-600 dark:text-gray-400">Key: {song.data.key}</p>
          )}
          {song.data.tags && (
            <ul class="mt-2 flex flex-wrap gap-1 list-none p-0">
              {song.data.tags.map((tag) => (
                <li class="tag-pill">{tag}</li>
              ))}
            </ul>
          )}
        </a>
      </li>
    ))}
  </ul>
  <p class="mt-8"><a href={base}>Go back</a></p>
  <script is:inline>
    const songItems = document.querySelectorAll('#song-list li');
    const searchInput = document.getElementById('song-search');
    const tagButtons = document.querySelectorAll('#tag-filters button');

    function applyFilters() {
      const query = searchInput.value.trim().toLowerCase();
      const activeTags = Array.from(tagButtons)
        .filter((btn) => btn.getAttribute('aria-pressed') === 'true')
        .map((btn) => btn.dataset.tag);
      songItems.forEach((item) => {
        const title = item.dataset.title;
        const tags = item.dataset.tags ? item.dataset.tags.split(' ') : [];
        const matchesTitle = title.includes(query);
        const matchesTags = activeTags.every((tag) => tags.includes(tag));
        item.hidden = !(matchesTitle && matchesTags);
      });
    }

    searchInput.addEventListener('input', applyFilters);
    tagButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        const pressed = btn.getAttribute('aria-pressed') === 'true';
        btn.setAttribute('aria-pressed', String(!pressed));
        btn.classList.toggle('bg-primary', !pressed);
        btn.classList.toggle('text-white', !pressed);
        applyFilters();
      });
    });
  </script>
</App>

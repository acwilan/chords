---
import App from '../../layouts/App.astro';
import { getCollection } from 'astro:content';
import { getLocaleFromUrl, createT } from '../../utils/i18n';
import artistFilterScript from '../../scripts/artistFilter.js?url';

const base = import.meta.env.BASE_URL.endsWith('/')
  ? import.meta.env.BASE_URL
  : `${import.meta.env.BASE_URL}/`;
const locale = getLocaleFromUrl(Astro.url.pathname, base);
const t = createT(locale);
const all = await getCollection('songs');
const map = new Map();
for (const entry of all) {
  const baseSlug = entry.id.replace(/(\.(en|es))?\.md$/, '');
  const lang = entry.data.lang;
  const group = map.get(baseSlug) || {};
  group[lang] = entry;
  map.set(baseSlug, group);
}
const songs = Array.from(map.entries()).map(([slug, langs]) => {
  const entry = langs[locale] || langs.es || langs.en;
  const linkLocale = langs[locale] ? locale : langs.es ? 'es' : 'en';
  return { slug, entry, linkLocale };
});
songs.sort((a, b) => a.entry.data.title.localeCompare(b.entry.data.title));
const tags = Array.from(new Set(songs.flatMap((s) => s.entry.data.tags ?? []))).sort();
const artistCounts = new Map<string, number>();
for (const song of songs) {
  const name = song.entry.data.artist || 'Unknown';
  artistCounts.set(name, (artistCounts.get(name) ?? 0) + 1);
}
const artists = Array.from(artistCounts.entries()).sort(([a], [b]) =>
  a.localeCompare(b)
);
const initialArtist = Astro.url.searchParams.get('artist');
const description = t('songs.description');
const url = `${base}${locale === 'en' ? 'en/' : ''}songs/`;
---
<App>
  <Fragment slot="head">
    <title>{t('songs.title')}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={t('songs.title')} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
  </Fragment>
  <h1>{t('songs.title')}</h1>
  <button
    id="artist-sidebar-toggle"
    class="mb-4 flex items-center md:hidden"
    aria-controls="artist-sidebar"
    aria-expanded="false"
    type="button"
  >
    {t('songs.artists')}
    <svg
      class="ml-2 h-4 w-4 transition-transform"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
    >
      <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
    </svg>
  </button>
  <div class="md:flex md:gap-4">
    <aside
      id="artist-sidebar"
      class="mb-4 hidden w-48 shrink-0 md:block"
    >
      <div class="mb-2 flex items-center justify-between">
        <h2 class="text-sm font-semibold">{t('songs.artists')}</h2>
        <button
          id="artist-clear"
          type="button"
          class="text-xs text-gray-600 hover:underline dark:text-gray-400"
        >
          {t('songs.clear')}
        </button>
      </div>
      <nav aria-label="Artist filters">
        <ul id="artist-filters" class="space-y-2 pl-0">
          <li class="list-none">
            <button
              type="button"
              data-artist=""
              aria-pressed={initialArtist ? 'false' : 'true'}
              class="flex w-full items-center justify-between rounded-full px-3 py-1 text-sm"
            >
              <span>{t('songs.all')}</span>
              <span class="text-xs text-gray-600 dark:text-gray-400">{songs.length}</span>
            </button>
          </li>
          {artists.map(([name, count]) => (
            <li class="list-none">
              <button
                type="button"
                data-artist={name}
                aria-pressed={initialArtist === name ? 'true' : 'false'}
                class="flex w-full items-center justify-between rounded-full px-3 py-1 text-sm"
              >
                <span>{name}</span>
                <span class="text-xs text-gray-600 dark:text-gray-400">{count}</span>
              </button>
            </li>
          ))}
        </ul>
      </nav>
    </aside>
    <div class="flex-1">
      <label for="song-search" class="sr-only">{t('songs.searchPlaceholder')}</label>
      <input
        id="song-search"
        type="text"
        placeholder={t('songs.searchPlaceholder')}
        class="input mb-4 w-full"
      />
      {tags.length > 0 && (
        <div
          id="tag-filters"
          class="mb-4 flex flex-wrap gap-2"
          aria-label={t('songs.tagFilterLabel')}
        >
          {tags.map((tag) => (
            <button
              type="button"
              data-tag={tag.toLowerCase()}
              aria-pressed="false"
              class="tag-pill px-3 py-1 text-sm"
            >
              {tag}
            </button>
          ))}
        </div>
      )}
      <ul
        id="song-list"
        class="grid list-none gap-4 p-0 sm:grid-cols-2 lg:grid-cols-3"
      >
        {songs.map((song) => {
          const artist = song.entry.data.artist || 'Unknown';
          const hidden =
            initialArtist && artist !== initialArtist ? true : false;
          return (
            <li
              class="list-none"
              data-title={song.entry.data.title.toLowerCase()}
              data-tags={(song.entry.data.tags ?? [])
                .map((t) => t.toLowerCase())
                .join(' ')}
              data-artist={artist}
              hidden={hidden}
            >
              <a
                href={`${base}${song.linkLocale === 'en' ? 'en/' : ''}songs/${song.slug}/`}
                class="card block"
              >
                <h2 class="text-lg font-semibold">{song.entry.data.title}</h2>
                {song.entry.data.artist && (
                  <p class="text-sm text-gray-600 dark:text-gray-400">{song.entry.data.artist}</p>
                )}
                {song.entry.data.key && (
                  <p class="text-sm text-gray-600 dark:text-gray-400">
                    {t('songs.key')}: {song.entry.data.key}
                  </p>
                )}
                {song.entry.data.tags && (
                  <ul class="mt-2 flex flex-wrap gap-1 list-none p-0">
                    {song.entry.data.tags.map((tag) => (
                      <li class="tag-pill">{tag}</li>
                    ))}
                  </ul>
                )}
              </a>
            </li>
          );
        })}
      </ul>
      <p class="mt-8"><a href={base}>{t('songs.goBack')}</a></p>
    </div>
  </div>
  <script id="artist-data" type="application/json">
    {JSON.stringify(artists)}
  </script>
  <script is:inline type="module">
    import Fuse from 'https://cdn.jsdelivr.net/npm/fuse.js@6.6.2/dist/fuse.esm.js';

    const songItems = document.querySelectorAll('#song-list > li');
    const searchInput = document.getElementById('song-search');
    const tagButtons = document.querySelectorAll('#tag-filters button');

    const songs = Array.from(songItems).map((element) => ({
      element,
      title: element.dataset.title || '',
      artist: element.dataset.artist || 'Unknown',
      tags: element.dataset.tags ? element.dataset.tags.split(' ') : [],
    }));

    const fuse = new Fuse(songs, {
      keys: ['title', 'artist', 'tags'],
      threshold: 0.3,
      ignoreLocation: true,
    });

    function applyFilters() {
      const query = searchInput.value.trim();
      const activeTags = Array.from(tagButtons)
        .filter((btn) => btn.getAttribute('aria-pressed') === 'true')
        .map((btn) => btn.dataset.tag);

      const results = query ? fuse.search(query).map((r) => r.item) : songs;
      const resultSet = new Set(results);
      const activeArtist = window.activeArtist;

      songs.forEach((song) => {
        const matchesSearch = resultSet.has(song);
        const matchesTags = activeTags.every((tag) => song.tags.includes(tag));
        const matchesArtist = !activeArtist || song.artist === activeArtist;
        song.element.hidden = !(matchesSearch && matchesTags && matchesArtist);
      });
    }

    window.applySongFilters = applyFilters;

    let debounce;
    searchInput.addEventListener('input', () => {
      clearTimeout(debounce);
      debounce = setTimeout(applyFilters, 200);
    });

    tagButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        const pressed = btn.getAttribute('aria-pressed') === 'true';
        btn.setAttribute('aria-pressed', String(!pressed));
        btn.classList.toggle('bg-primary', !pressed);
        btn.classList.toggle('text-white', !pressed);
        applyFilters();
      });
    });
  </script>
  <script type="module" src={artistFilterScript}></script>
</App>

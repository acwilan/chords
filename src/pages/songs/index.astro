---
import App from '../../layouts/App.astro';
import { getCollection } from 'astro:content';
import { getLocaleFromUrl, createT } from '../../utils/i18n';

const base = import.meta.env.BASE_URL.endsWith('/')
  ? import.meta.env.BASE_URL
  : `${import.meta.env.BASE_URL}/`;
const locale = getLocaleFromUrl(Astro.url.pathname, base);
const t = createT(locale);
const all = await getCollection('songs');
const map = new Map();
for (const entry of all) {
  const slug = entry.data.slug;
  const lang = entry.data.lang;
  const group = map.get(slug) || {};
  group[lang] = entry;
  map.set(slug, group);
}
const songs = Array.from(map.entries()).map(([slug, langs]) => {
  const entry = langs[locale] || langs.es || langs.en;
  const linkLocale = langs[locale] ? locale : (langs.es ? 'es' : 'en');
  return { slug, entry, linkLocale };
});
songs.sort((a, b) => a.entry.data.title.localeCompare(b.entry.data.title));
const tags = Array.from(new Set(songs.flatMap((s) => s.entry.data.tags ?? []))).sort();
const description = t('songs.description');
const url = `${base}${locale === 'en' ? 'en/' : ''}songs/`;
---
<App>
  <Fragment slot="head">
    <title>{t('songs.title')}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={t('songs.title')} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
  </Fragment>
  <h1>{t('songs.title')}</h1>
  <label for="song-search" class="sr-only">{t('songs.searchPlaceholder')}</label>
  <input
    id="song-search"
    type="text"
    placeholder={t('songs.searchPlaceholder')}
    class="input mb-4 w-full"
  />
  {tags.length > 0 && (
    <div
      id="tag-filters"
      class="mb-4 flex flex-wrap gap-2"
      aria-label={t('songs.tagFilterLabel')}
    >
      {tags.map((tag) => (
        <button
          type="button"
          data-tag={tag.toLowerCase()}
          aria-pressed="false"
          class="tag-pill px-3 py-1 text-sm"
        >
          {tag}
        </button>
      ))}
    </div>
  )}
  <ul
    id="song-list"
    class="grid list-none gap-4 p-0 sm:grid-cols-2 lg:grid-cols-3"
  >
    {songs.map((song) => (
      <li
        class="list-none"
        data-title={song.entry.data.title.toLowerCase()}
        data-tags={(song.entry.data.tags ?? [])
          .map((t) => t.toLowerCase())
          .join(' ')}
      >
        <a
          href={`${base}${song.linkLocale === 'en' ? 'en/' : ''}songs/${song.slug}/`}
          class="card block"
        >
          <h2 class="text-lg font-semibold">{song.entry.data.title}</h2>
          {song.entry.data.key && (
            <p class="text-sm text-gray-600 dark:text-gray-400">{t('songs.key')}: {song.entry.data.key}</p>
          )}
          {song.entry.data.tags && (
            <ul class="mt-2 flex flex-wrap gap-1 list-none p-0">
              {song.entry.data.tags.map((tag) => (
                <li class="tag-pill">{tag}</li>
              ))}
            </ul>
          )}
        </a>
      </li>
    ))}
  </ul>
  <p class="mt-8"><a href={base}>{t('songs.goBack')}</a></p>
  <script is:inline>
    const songItems = document.querySelectorAll('#song-list li');
    const searchInput = document.getElementById('song-search');
    const tagButtons = document.querySelectorAll('#tag-filters button');

    function applyFilters() {
      const query = searchInput.value.trim().toLowerCase();
      const activeTags = Array.from(tagButtons)
        .filter((btn) => btn.getAttribute('aria-pressed') === 'true')
        .map((btn) => btn.dataset.tag);
      songItems.forEach((item) => {
        const title = item.dataset.title;
        const tags = item.dataset.tags ? item.dataset.tags.split(' ') : [];
        const matchesTitle = title.includes(query);
        const matchesTags = activeTags.every((tag) => tags.includes(tag));
        item.hidden = !(matchesTitle && matchesTags);
      });
    }

    searchInput.addEventListener('input', applyFilters);
    tagButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        const pressed = btn.getAttribute('aria-pressed') === 'true';
        btn.setAttribute('aria-pressed', String(!pressed));
        btn.classList.toggle('bg-primary', !pressed);
        btn.classList.toggle('text-white', !pressed);
        applyFilters();
      });
    });
  </script>
</App>
